<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!--
     checkstyle configuration for the CS2103/T Java Coding Standard.
     http://www.comp.nus.edu.sg/%7Ecs2103/AY1617S1/contents/coding-standards-java.html
 -->
<module name="Checker">
    <property name="charset" value="UTF-8" />
    <property name="fileExtensions" value="java" />

    <!-- Indentation should only use spaces, no tabs -->
    <module name="FileTabCharacter" />

    <!-- There must be a newline at end of files -->
    <module name="NewlineAtEndOfFile">
        <!-- Only accept \n as newline -->
        <property name="lineSeparator" value="lf" />
    </module>

    <module name="TreeWalker">
        <!-- class Foo must be in a file called Foo.java -->
        <module name="OuterTypeFilename" />

        <!-- No import statements should use the * notation -->
        <module name="AvoidStarImport">
            <property name="excludes" value="org.junit.Assert" />
        </module>

        <!-- Each top level class resides in a source file of its own -->
        <module name="OneTopLevelClass" />

        <!-- Imports and package definitions should not be line wrapped -->
        <module name="NoLineWrap" />

        <module name="EmptyLineSeparator">
            <!-- Allow no empty lines between fields -->
            <property name="allowNoEmptyLineBetweenFields" value="true" />
            <!-- But don't allow multiple empty lines -->
            <property name="allowMultipleEmptyLines" value="false" />
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false" />
        </module>

        <!-- Do, else, for, if, while must be surrounded by braces -->
        <module name="NeedBraces" />

        <!-- Placement of left curly braces '{' for code blocks -->
        <module name="LeftCurly">
            <!-- Left curly brace must be at end of line -->
            <property name="option" value="eol" />
            <!-- But allow enums to violate this rule -->
            <property name="ignoreEnums" value="true" />
        </module>

        <!-- Placement of right curly braces '}' -->
        <module name="RightCurly">
            <!-- The brace should be on the same line as the next part of a
                 multi-block statement -->
            <property name="option" value="same" />
        </module>

        <!--
             Whitespace around Generic tokens (angle brackets) "<" and ">"
             are correct to the typical convention.

             Left angle bracket ("<"):
                * should be preceded with whitespace only in generic method
                  definitions
                * should not be preceded with whitespace when it is preceding
                  method names or following type names.
                * should not be followed with whitespace in all cases.

             Right angle bracket (">"):
                * should not be preceded with whitespace in all cases.
                * should be followed with whitespace in almost all cases,
                  except diamond operators and when preceding method name.
        -->
        <module name="GenericWhitespace" />

        <!-- No trailing whitespace -->
        <module name="Regexp">
            <property name="format" value="[ \t]+$" />
            <property name="illegalPattern" value="true" />
            <property name="message" value="Trailing whitespace" />
        </module>

        <!-- Most tokens must be surrounded by whitespace -->
        <module name="WhitespaceAround">
            <!-- Allow empty constructors e.g. MyClass() {} -->
            <property name="allowEmptyConstructors" value="true" />
            <!-- Allow empty methods e.g. void func() {} -->
            <property name="allowEmptyMethods" value="true" />
            <!-- Allow empty types e.g. class Foo{}, enum Foo {} -->
            <property name="allowEmptyTypes" value="true" />
            <!-- Allow empty loops e.g. for (int i = 1; i > 1; i++) {} -->
            <property name="allowEmptyLoops" value="true" />
            <!-- Allow empty lambdas e.g. () -> {} -->
            <property name="allowEmptyLambdas" value="true" />
        </module>

        <!-- Only one statement per line -->
        <module name="OneStatementPerLine" />

        <!-- Indentation rules -->
        <module name="Indentation">
            <!-- Indent with 4 spaces -->
            <property name="basicOffset" value="4" />
            <!-- Cases should be on the same indent as the switch -->
            <property name="caseIndent" value="0" />
        </module>

        <!-- Comments must be indented as the same level as surrounding code
             -->
        <module name="CommentsIndentation" />

        <!-- Arrays should be declared Java-style -->
        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true" />
        </module>

        <!-- Package naming -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Type naming -->
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Member names mustBeCamelCase -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Parameter names mustBeCamelCase -->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Catch parameters mustBeCamelCase -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Local variable naming mustBeInCamelCase -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="allowOneCharVarInForLoop" value="true" />
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Method naming -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- All switches should have a default case. If the developer is sure
             that all currently possible cases are covered, this should be
             expressed in the default branch by using an assertion -->
        <module name="MissingSwitchDefault" />

        <!-- Fallthroughs in switch cases must be explictly marked by a
             "fallthru", "fall through", "fallthrough", "falls through" or
             "fallsthrough" comment. -->
        <module name="FallThrough" />

        <!-- Overloaded methods should be grouped together. -->
        <module name="OverloadMethodsDeclarationOrder" />

        <!-- All classes must have a package declaration -->
        <module name="PackageDeclaration" />

        <!-- No unused imports -->
        <module name="UnusedImports" />

        <!-- No redundant imports -->
        <module name="RedundantImport" />

        <!-- Imports must be sorted alphabetically -->
        <module name="CustomImportOrder">
            <property name="customImportOrderRules" value="STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE" />
            <property name="standardPackageRegExp" value="^(java|javax)\." />
            <property name="specialImportsRegExp" value="^org\." />
            <property name="thirdPartyPackageRegExp" value="^com\." />
            <property name="separateLineBetweenGroups" value="true" />
            <property name="sortImportsInGroupAlphabetically" value="true" />
        </module>

        <!-- Operators must be at the start of a new line when wrapping -->
        <module name="OperatorWrap" />

        <module name="ModifierOrder" />
        <module name="RedundantModifier" />

        <!-- Only use single spaces for whitespace separation -->
        <module name="SingleSpaceSeparator" />

        <module name="AnnotationLocation" />

    </module>
</module>
